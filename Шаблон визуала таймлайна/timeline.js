document.addEventListener("DOMContentLoaded", function () {
    let daysCount = 7;
    const todayDate = "09.02.2025";
    const [day, month, year] = todayDate.split(".").map(num => parseInt(num, 10));
    const today = new Date(year, month - 1, day); // JS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –º–µ—Å—è—Ü–µ–≤!
    let events1 = {
        2:  ["–£–±–æ—Ä—â–∏—Ü–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥"],
        7:  ["–°–¥–∞—á–∞ –æ—Ç—á—ë—Ç–∞", "–î–µ–¥–ª–∞–π–Ω –ø–æ –ø—Ä–æ–µ–∫—Ç—É", "–ö—É—à–∞—Ç—å —à–æ–∫–æ–ª–∞–¥"],
        9:  ["–í–∞–∂–Ω—ã–π –∑–≤–æ–Ω–æ–∫"]
    };

    const events = {
    "16.01.2025": ["–ó–∞–¥–∞—á–∞"],
    "18.01.2025": ["–î–µ–¥–ª–∞–π–Ω", "–ü—Ä–æ–µ–∫—Ç", "–ü—Ä–æ–µ–∫—Ç", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"],
    "19.01.2025": ["–í—Å—Ç—Ä–µ—á–∞"],
    "22.01.2025": ["–ó–≤–æ–Ω–æ–∫", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–û—Ç—á—ë—Ç"],
    "24.01.2025": ["–û—Ç—á—ë—Ç", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞"],
    "25.01.2025": ["–ü—Ä–æ–≤–µ—Ä–∫–∞"],
    "29.01.2025": ["–ó–∞–¥–∞—á–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ü—Ä–æ–µ–∫—Ç"],
    "01.02.2025": ["–ó–≤–æ–Ω–æ–∫", "–ó–≤–æ–Ω–æ–∫", "–ó–≤–æ–Ω–æ–∫"],
    "04.02.2025": ["–°–æ–±—Ä–∞–Ω–∏–µ"],
    "06.02.2025": ["–ó–≤–æ–Ω–æ–∫", "–ó–∞–¥–∞—á–∞", "–í—Å—Ç—Ä–µ—á–∞"],
    "08.02.2025": ["–°–æ–±—Ä–∞–Ω–∏–µ", "–°–æ–≤–µ—â–∞–Ω–∏–µ", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ó–≤–æ–Ω–æ–∫"],
    "09.02.2025": ["–î–µ–¥–ª–∞–π–Ω", "–í—Å—Ç—Ä–µ—á–∞"],
    "11.02.2025": ["–ü—Ä–æ–µ–∫—Ç"],
    "12.02.2025": ["–î–µ–¥–ª–∞–π–Ω"],
    "14.02.2025": ["–î–µ–¥–ª–∞–π–Ω"],
    "17.02.2025": ["–î–µ–¥–ª–∞–π–Ω", "–°–æ–≤–µ—â–∞–Ω–∏–µ", "–ó–∞–¥–∞—á–∞"],
    "18.02.2025": ["–°–æ–±—Ä–∞–Ω–∏–µ"],
    "19.02.2025": ["–ó–≤–æ–Ω–æ–∫", "–°–æ–±—Ä–∞–Ω–∏–µ"],
    "21.02.2025": ["–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"],
    "24.02.2025": ["–û—Ç—á—ë—Ç"],
    "27.02.2025": ["–ó–≤–æ–Ω–æ–∫", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–°–æ–±—Ä–∞–Ω–∏–µ", "–ü—Ä–æ–µ–∫—Ç"],
    "28.02.2025": ["–û—Ç—á—ë—Ç"],
    "02.03.2025": ["–ó–≤–æ–Ω–æ–∫"],
    "06.03.2025": ["–°–æ–≤–µ—â–∞–Ω–∏–µ", "–ó–≤–æ–Ω–æ–∫"],
    "10.03.2025": ["–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–ó–∞–¥–∞—á–∞", "–°–æ–±—Ä–∞–Ω–∏–µ"],
    "12.03.2025": ["–ó–≤–æ–Ω–æ–∫"],
    "13.03.2025": ["–ó–∞–¥–∞—á–∞", "–°–æ–±—Ä–∞–Ω–∏–µ", "–í—Å—Ç—Ä–µ—á–∞"],
    "14.03.2025": ["–û—Ç—á—ë—Ç", "–û—Ç—á—ë—Ç", "–ó–∞–¥–∞—á–∞"]
};


    const daysSelect = document.getElementById("daysCount");
    const centerTodayCheckbox = document.getElementById("centerToday");


    function generateTimeline(daysCount, centerToday = true) {

        const timelineContainer = document.querySelector('.timeline-container');
        timelineContainer.innerHTML = '<div class="timeline-line"></div>'; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–ª–∞–π–Ω

        const dayMult = 2;  // –í–µ—Å –¥–Ω—è –≤ —Ç–∏–∫–µ—Ç–∞—Ö
        const eventMult = 1;  // –í–µ—Å –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–∏–∫–µ—Ç–∞—Ö

        if (daysCount % 2 === 0) {
            console.warn("‚ö† –ß–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!");
            return;
        }

        console.log("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å startDate...");
        const [day, month, year] = todayDate.split(".").map(num => parseInt(num, 10));
        const startDate = new Date(year, month - 1, day); 
        startDate.setDate(startDate.getDate() - Math.floor((daysCount - 1) / 2));
        console.log("‚úÖ startDate:", startDate);

        let totalTickets = 0; // –û–±—â–∞—è —Å—É–º–º–∞ —Ç–∏–∫–µ—Ç–æ–≤
        let ticketsArray = []; // –•—Ä–∞–Ω–∏–º —Ç–∏–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è

        let currentDate = new Date(startDate); // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é startDate


        for (let i = 0; i < daysCount; i++) {
            let dateStr = formatDate(currentDate); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç "DD.MM.YYYY"

            let dayTickets = dayMult;
            totalTickets += dayMult;

            if (events[dateStr]) {
                dayTickets += events[dateStr].length * eventMult;
                totalTickets += events[dateStr].length * eventMult;
            }

            ticketsArray.push({ date: dateStr, tickets: dayTickets });

            currentDate.setDate(currentDate.getDate() + 1); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        }

        console.log("üéüÔ∏è –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤:", totalTickets);
        console.log("üéüÔ∏è –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º:", ticketsArray);

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0
        let oneTicketPrice = totalTickets > 0 ? 100 / totalTickets : 0;
        console.log("—Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ", oneTicketPrice);
        ticketsArray = ticketsArray.map(day => ({
            ...day,
            weight: oneTicketPrice * day.tickets
        }));

        console.log("üéüÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:", ticketsArray);

        let centerIndex = Math.floor(daysCount / 2);

        let leftTickets = 0;
        let rightTickets = 0;
        let leftWeight = 0;
        let rightWeight = 0;

        for (let i = 0; i < daysCount; i++) {
            let { tickets, weight } = ticketsArray[i];

            if (i < centerIndex) {
                leftTickets += tickets;
                leftWeight += weight;
            } else if (i > centerIndex) {
                rightTickets += tickets;
                rightWeight += weight;
            }
        }

        // üìå –ë–µ—Ä—ë–º –ø–æ–ª–æ–≤–∏–Ω—É –≤–µ—Å–∞ –∏ –±–∏–ª–µ—Ç–æ–≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è
        let centerTickets = ticketsArray[centerIndex].tickets / 2;
        let centerWeight = ticketsArray[centerIndex].weight / 2;

        leftTickets += centerTickets;
        rightTickets += centerTickets;

        leftWeight += centerWeight;
        rightWeight += centerWeight;

        console.log("üéüÔ∏è –ò—Ç–æ–≥–æ–≤—ã–µ –≤–µ—Å–∞:");
        console.log("‚¨Ö –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –±–∏–ª–µ—Ç—ã =", leftTickets, ", –≤–µ—Å =", leftWeight.toFixed(2));
        console.log("‚û° –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –±–∏–ª–µ—Ç—ã =", rightTickets, ", –≤–µ—Å =", rightWeight.toFixed(2));

        // üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        let normalizationFactor = 50 / Math.max(leftWeight, rightWeight);

        // üìå –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        let normalizedLeftWeight = leftWeight * normalizationFactor;
        let normalizedRightWeight = rightWeight * normalizationFactor;

        console.log("üéØ –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞:");
        console.log("‚¨Ö –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å =", normalizedLeftWeight.toFixed(2), "%");
        console.log("‚û° –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å =", normalizedRightWeight.toFixed(2), "%");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ù–ï 100%, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã:", (normalizedLeftWeight + normalizedRightWeight).toFixed(2), "%");

        // üìå 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
        ticketsArray = ticketsArray.map(day => ({
            ...day,
            normalizedWeight: day.weight * normalizationFactor
        }));

        // üìå –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log("üéØ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤:", ticketsArray);

        let todayIndex = ticketsArray.findIndex(day => day.date === todayDate);
        console.log("üéØ todayIndex:", todayIndex);

        drawDayCenters(timelineContainer,ticketsArray, todayIndex);
        todayIndex = ticketsArray.findIndex(day => day.date === todayDate);
        drawDayTicks(timelineContainer,ticketsArray, todayIndex);

    }

    function formatDate(date) {
        return date.toLocaleDateString("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric"
        });
    }


function drawDayTicks(timelineContainer, ticketsArray, todayIndex) {
    // –£–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∏–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
    // timelineContainer.querySelectorAll(".day-tick").forEach(el => el.remove());

    // –ú–∞—Å—Å–∏–≤, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –±—É–¥–µ—Ç [–ª–µ–≤–∞—è_–≥—Ä–∞–Ω–∏—Ü–∞, –ø—Ä–∞–≤–∞—è_–≥—Ä–∞–Ω–∏—Ü–∞].
    const dayBoundaries = new Array(ticketsArray.length).fill(null).map(() => [0, 0]);

    // 1) –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è":
    //    –î–µ–Ω—å todayIndex –∑–∞–π–º—ë—Ç —à–∏—Ä–∏–Ω—É = ticketsArray[todayIndex].normalizedWeight
    //    –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ = 50% - –ø–æ–ª–æ–≤–∏–Ω–∞ –µ–≥–æ —à–∏—Ä–∏–Ω—ã
    const halfWidthToday = ticketsArray[todayIndex].normalizedWeight / 2;
    const leftToday = 50 - halfWidthToday;
    const rightToday = leftToday + ticketsArray[todayIndex].normalizedWeight;
    dayBoundaries[todayIndex] = [leftToday, rightToday];

    // 2) –ò–¥—ë–º –≤–ø—Ä–∞–≤–æ –æ—Ç ¬´—Å–µ–≥–æ–¥–Ω—è¬ª (i = todayIndex+1 ... –¥–æ –∫–æ–Ω—Ü–∞)
    for (let i = todayIndex + 1; i < ticketsArray.length; i++) {
        const prevRight = dayBoundaries[i - 1][1];
        const width = ticketsArray[i].normalizedWeight;

        const left = prevRight;       // –Ω–∞—á–∏–Ω–∞–µ–º —Ä–æ–≤–Ω–æ —Ç–∞–º, –≥–¥–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        const right = left + width;
        dayBoundaries[i] = [left, right];
    }

    // 3) –ò–¥—ë–º –≤–ª–µ–≤–æ –æ—Ç ¬´—Å–µ–≥–æ–¥–Ω—è¬ª (i = todayIndex-1 ... –¥–æ 0)
    for (let i = todayIndex - 1; i >= 0; i--) {
        const nextLeft = dayBoundaries[i + 1][0];
        const width = ticketsArray[i].normalizedWeight;

        const right = nextLeft;       // –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ —É —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
        const left = right - width;
        dayBoundaries[i] = [left, right];
    }

    // 4) –°–æ–±–∏—Ä–∞–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏
    //    (–ª–µ–≤–∞—è + –ø—Ä–∞–≤–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è)
    let allBoundaries = [];
    dayBoundaries.forEach(bounds => {
        allBoundaries.push(bounds[0], bounds[1]);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å < 0 –∏–ª–∏ > 100)
    allBoundaries.sort((a, b) => a - b);

    // 5) –†–∏—Å—É–µ–º ¬´—Ç–∏–∫–∏¬ª (day-tick) –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    allBoundaries.forEach(pos => {
        const tick = document.createElement("div");
        tick.className = "day-tick";
        tick.style.left = pos + "%";
        // –ß—Ç–æ–±—ã –ª–∏–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ —à–ª–∞ –ø–æ —Ç–æ—á–∫–µ, –∞ –Ω–µ —Å–ª–µ–≤–∞ –æ—Ç –Ω–µ—ë
        tick.style.transform = "translateX(-50%)";
        timelineContainer.appendChild(tick);
    });

    console.log("‚úÖ Day boundaries:", dayBoundaries);
    console.log("‚úÖ All sorted boundaries:", allBoundaries);
}




function drawDayCenters(timelineContainer, ticketsArray, todayIndex) {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    // timelineContainer.querySelectorAll('.fake-center-line').forEach(el => el.remove());

    // –ú–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    let dayCenters = new Array(ticketsArray.length).fill(0);

    // 1) –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–µ–Ω—å: —Å—Ç–∞–≤–∏–º –≤ 50%
    dayCenters[todayIndex] = 50;

    // 2) –î–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ (–æ—Ç todayIndex - 1 –∫ 0)
    for (let i = todayIndex - 1; i >= 0; i--) {
        // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏ i –∏ i+1 ‚Äî —ç—Ç–æ –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã i + –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã i+1
        let halfSum = 0.5 * (ticketsArray[i].normalizedWeight + ticketsArray[i + 1].normalizedWeight);
        // –°–¥–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ –Ω–∞ halfSum –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (i+1)-–≥–æ –¥–Ω—è
        dayCenters[i] = dayCenters[i + 1] - halfSum;
    }

    // 3) –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ (–æ—Ç todayIndex + 1 –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É)
    for (let i = todayIndex + 1; i < ticketsArray.length; i++) {
        let halfSum = 0.5 * (ticketsArray[i].normalizedWeight + ticketsArray[i - 1].normalizedWeight);
        dayCenters[i] = dayCenters[i - 1] + halfSum;
    }

    // 4) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Å—Ç–∞–≤–∏–º ¬´–ª–∏–Ω–µ–π–∫—É¬ª (fake-center-line)
    dayCenters.forEach((pos, i) => {
        const marker = document.createElement("div");
        marker.className = "fake-center-line";
        // `pos` —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ normalizedWeight —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç 100%)
        marker.style.left = pos + "%";
        // –°–º–µ—â–∞–µ–º —Å–∞–º—É –ª–∏–Ω–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ ¬´–ø–æ —Ü–µ–Ω—Ç—Ä—É¬ª
        marker.style.transform = "translateX(-50%)";
        timelineContainer.appendChild(marker);
    });

    console.log("‚úÖ –¶–µ–Ω—Ç—Ä—ã –¥–Ω–µ–π —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –≤–µ—Å–∞–º:", dayCenters);
}


    function handleMouseMove(event) {
        let mouseX = event.clientX;
        let radius = 70;

        document.querySelectorAll(".event-marker").forEach(marker => {
            let rect = marker.getBoundingClientRect();
            let markerX = rect.left + rect.width / 2;
            let distance = Math.abs(mouseX - markerX);

            let label = marker.nextElementSibling;
            label.style.opacity = distance < radius ? "1" : "0";
        });
    }

    document.addEventListener("mousemove", handleMouseMove);
    daysSelect.addEventListener("change", () => generateTimeline(parseInt(daysSelect.value), centerTodayCheckbox.checked));
    centerTodayCheckbox.addEventListener("change", () => generateTimeline(parseInt(daysSelect.value), centerTodayCheckbox.checked));

    generateTimeline(daysCount);
});

document.addEventListener("DOMContentLoaded", function () {
    const workZoneSelect = document.getElementById("workZone");

function updateWorkZone() {
    let workZoneValue = parseInt(workZoneSelect.value);
    let remainingSpace = (100 - workZoneValue) / 2; // –õ–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –æ—Ç—Å—Ç—É–ø

    document.querySelector(".timeline-container").style.width = workZoneValue + "vw";

    let fadeLeft = document.querySelector(".timeline-fade-left");
    let fadeRight = document.querySelector(".timeline-fade-right");
    let timelineContainer = document.querySelector(".timeline-container");

    fadeLeft.style.width = remainingSpace + "vw";
    fadeRight.style.width = remainingSpace + "vw";

    // üõ† –§–∏–∫—Å–∏–º —Å–º–µ—â–µ–Ω–∏–µ:
    fadeLeft.style.height = "2px";
    fadeRight.style.height = "2px";

    // üìå –ò—Å–ø—Ä–∞–≤–ª—è–µ–º `top` —Å —Ç–æ—á–Ω—ã–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
    let timelineTop = timelineContainer.getBoundingClientRect().top + window.scrollY;
    let newTop = Math.round(timelineTop + timelineContainer.offsetHeight / 2) - 1;

    fadeLeft.style.top = `${newTop}px`;
    fadeRight.style.top = `${newTop}px`;
}
    workZoneSelect.addEventListener("change", updateWorkZone);
    updateWorkZone(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

function parseSchedule(text) {
    const schedule = {};
    const lines = text.split("\n"); // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º

    for (let line of lines) {
        if (!line.trim()) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        const [id, rest] = line.split(":").map(s => s.trim());
        const [date, task] = rest.split(",").map(s => s.trim());

        if (!schedule[date]) {
            schedule[date] = []; // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –¥–Ω—è –µ—â–µ –Ω–µ—Ç
        }
        schedule[date].push(task); // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–æ –≤ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
    }
    return schedule;
}    
});


